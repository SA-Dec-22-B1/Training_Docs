Design Document::
		Workflow Diagram :::
			1. No. of Ec2 Instances => 3
			2. Resource Details
			3. Tools
			4. Notifications 
			5. Exception Handling
					Document all the errors and issues you face in this whole process.


1.Jenkins (Master):JDK,Jenkins,Email Extenson Plugin,ssh publisher,webhook
2.Jenkins (Slave):jdk,Maven,Docker,Git
3.QA Server 

(Kubernetes Master) : K8s Master, Prometheus,Grafana,Teraform
4.Kubernetes (Worker Node1,2): K8s,

2. Resource Details
AWS Instances


3.Tools
Terraform (Creation for Instances)
Jdk
Maven
Git
Kubernetes
Docker(Linux)
Jenkins (Web Hook Plugin,JUnit)
Prometheus (For automated Monitoring)
Grafana (For automated visualizaation)


4.Notifications

Email Extension Plugin


5. Exception Handling
 Document all the errors and issues you face in this whole process.

Infra Team :: Infra Provisioning! -- 


4 instances can be created using terraform

Configure the servers :---> Ansible to install n config all the required tools in all these servers!

Build, deployment Kubernetes cluster -- master, worknodes

Prod Support/Monitoring Team -- Prometheus/grafana
	cpu, memory, 



Infra-Team		::: Server1 -- Terraform & Ansible

	Will support :	Dev, build, deployment servers, Monitoring server

	Terraform :
		Using terraform provion all these servers.
			jenkins_Master,Jenkins_Slave,KuberMaster,KubernetesWN1&2,Monitoring_server

	Ansible : 
		Using Ansible Configuration Management : Ansible :
			Ansible Node :: jenkins_Master,Jenkins_Slave,KuberMaster,KubernetesWN1&2,Monitoring_server


Dev_Team

	CI/CD Pipeline :

	scm-checkout --> build --> Deployment(Kubernetes)

Release Mgmt Team 

	By automate these ci/cd pipeline


Production_Monitoring Team

	To monitor the devops servers


Project Specific :::

Launch these 6 EC2 Instances : Amaznon Linux 2
	jenkins_Master,Jenkins_Slave,KuberMaster,KubernetesWN1&2 				Monitoring_server
	
	1. Create pipeline ::: test this pipeline with java_mvn_app project.

Implement the same with any project 


Phase I :

	Launch these 6 EC2 Instances : Amaznon Linux 2
		jenkins_Master,Jenkins_Slave,KuberMaster,Kubernetes-WN1&2,Monitoring_server
			username(devopsadmin),portnumber,ssh_keys,
Phase II :

	Install & Config required tools in all these servers 

Phase III :

	Create CI/CD Pipeline : End-to-End Pipeline 
	
		stage1 - scm-checkout 
		stage2 - build 
		stage3 - build docker image
		stage4 - publish to dockerhub
		stage5 - deploy to kubernetes
		
Phase IV :
	Monitor the servers using Monitoring Tools
	
	
	
	

###############
Mar-04
###############

	Project :::
	
		How to build and Deploy Java Web-Application ?
		
		Development -- IDE 
		
		Pipeline Stages !!!
		
	CI/CD :::
	
	Jenkins - Master and DUMP all the tools in it.
	
	
Architecture :::


	Dev :::
	
		VS Code / Eclipse to create the project.
		clone the proj. repo
		GITHUB Web-hook shd trigger the pipeline!
		
	CI/CD :::
	
		Jenkins_Master :		git,jdk,jenkins 
			Jenkins_Slave : (Build_Server) -- Build appln. artifacts & Docker Image	
				build : 				git,jdk,maven,docker, valid user
		
		KubernetesMaster
			Kubernetes-WN1&2
		
		
	scm-checkout --> checkout src code

	build		--> compile, test, create artifact *.war
	
	docker_Image build --> Dockerfile, docker build 
	
	docker_Publish to docker hub ---> docker hub login, push to docker registry
	
	Deploy to kubernetes --> Deployment manifest, NodePort!
	
	PODs	--> single instance of pod is created.
	
	Deployment Controller :::
	
	create multiple replicas of pod 5 
	scale UP/DOWN 
	Upgrade
	Undo 
	
	
usermod -aG docker devopsadmin			
		
		
		Kubernetes Cluster :::: 
			WN1&2   ==> 	
			
			Namespace!!! 
			
			QA
			UAT 
			PROD 
		
		

	
	Dynamic server provisioning ????
	
	Test apply.
	
	
	
	
	
	--> scm-checkout 
	--> build 
	--> Create artifacts 
	--> Build Docker Image 
	--> Publish to DockerHub
	--> Terraform (Provision the Test_Server)
	--> Ansible to config this Test_erver (docker)
	--> Test_Server (Run the Docker Image)

pipeline_Job1:

	--> Terraform (Provision the Test_Server)
	--> Ansible to config this Test_Server (docker)

pipeline_Job2:
	
	--> scm-checkout 
	--> build 
	--> Create artifacts 
	--> Build Docker Image 
	--> Publish to DockerHub
	--> Test_Server (Run the Docker Image)	
	

	



